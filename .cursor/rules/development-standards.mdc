---
description:
globs:
alwaysApply: false
---
# 개발 표준 및 코딩 컨벤션

## TypeScript 코딩 표준

### 엄격한 타입 체킹
[tsconfig.json](mdc:tsconfig.json)에 정의된 엄격한 설정을 준수하세요:
- `noUncheckedIndexedAccess`: 배열/객체 접근 시 undefined 체크 필수
- `exactOptionalPropertyTypes`: 선택적 속성의 정확한 타입 사용
- `noImplicitReturns`: 모든 코드 경로에서 명시적 반환
- `noFallthroughCasesInSwitch`: switch 문에서 의도적인 fallthrough만 허용

### 타입 정의 패턴
```typescript
// ✅ 좋은 예: 엄격한 타입 정의
interface UserData {
  id: string;
  name: string;
  email?: string; // 선택적 속성 명확히 표시
}

// ✅ 배열 접근 시 안전한 체크
const users: UserData[] = [];
const firstUser = users[0]; // Type: UserData | undefined
if (firstUser) {
  console.log(firstUser.name); // 안전한 접근
}
```

## React 컴포넌트 패턴

### 컴포넌트 작성 기준
```typescript
// ✅ 권장 패턴
interface ComponentProps {
  title: string;
  description?: string;
  children?: React.ReactNode;
}

export function MyComponent({ title, description, children }: ComponentProps) {
  return (
    <div>
      <h1>{title}</h1>
      {description && <p>{description}</p>}
      {children}
    </div>
  );
}

// Export default는 Page 컴포넌트에만 사용
export default function Page() {
  return <MyComponent title="예시" />;
}
```

## Next.js 15 App Router 패턴

### 페이지 구조
```
src/app/
├── page.tsx          # 홈페이지
├── layout.tsx        # 루트 레이아웃
├── globals.css       # 전역 스타일
├── [locale]/         # 국제화 지원
└── api/              # API Routes
```

### 메타데이터 패턴
[src/app/layout.tsx](mdc:src/app/layout.tsx)를 참조하여 메타데이터를 정의하세요:
```typescript
export const metadata: Metadata = {
  title: {
    template: '%s | 사이트명',
    default: '기본 제목'
  },
  description: '상세 설명',
  // OpenGraph, Twitter Card 등 포함
}
```

## 스타일링 컨벤션

### Tailwind CSS 사용법
[.prettierrc](mdc:.prettierrc)에 정의된 Tailwind 플러그인을 활용하여 클래스를 자동 정렬하세요:

```tsx
// ✅ cn 유틸리티 사용
import { cn } from "@/lib/utils";

<div className={cn(
  "base-classes",
  variant === "primary" && "primary-classes",
  className
)}>
```

### CSS 최적화
[postcss.config.mjs](mdc:postcss.config.mjs)의 설정에 따라 프로덕션에서는 자동으로 CSS가 최적화됩니다.

## 린팅 및 포맷팅

### ESLint 규칙 준수
[eslint.config.mjs](mdc:eslint.config.mjs)에 정의된 규칙을 준수하세요:
- Next.js 15 특화 규칙
- 접근성(a11y) 규칙
- TypeScript 최적화 규칙

### 자동화된 검사
```bash
# 저장 전 실행할 명령어들
npm run type-check  # 타입 검사
npm run lint:fix    # 린팅 및 자동 수정
npm run format      # 코드 포맷팅
```

## 성능 최적화 가이드

### Web Vitals 고려사항
[src/app/providers.tsx](mdc:src/app/providers.tsx)의 Web Vitals 모니터링을 참조하여:
- 이미지는 next/image 컴포넌트 사용
- 폰트는 next/font 사용
- 적절한 loading 상태 제공
- 레이아웃 시프트 최소화

### API Routes 최적화
[src/app/api/url-meta/route.ts](mdc:src/app/api/url-meta/route.ts)를 참조하여:
- `connection()` API 사용
- 적절한 캐싱 전략 적용
- 에러 핸들링 강화
- 타임아웃 설정

## 보안 고려사항

### 미들웨어 활용
[src/app/middleware.ts](mdc:src/app/middleware.ts)의 보안 헤더를 참조하여:
- CSP 헤더 설정
- XSS 방어
- 클릭재킹 방어

### 환경 변수 관리
```typescript
// ✅ 환경 변수 타입 안전성
const apiUrl = process.env.NEXT_PUBLIC_API_URL;
if (!apiUrl) {
  throw new Error('NEXT_PUBLIC_API_URL is required');
}
```

## 테스트 및 검증

### 프리 커밋 체크리스트
1. `npm run type-check` 통과
2. `npm run lint` 통과  
3. `npm run format:check` 통과
4. 빌드 테스트: `npm run build`

### 성능 측정
```bash
# 번들 크기 분석
npm run analyze

# Web Vitals 체크 (개발자 도구 Lighthouse 탭)
```
