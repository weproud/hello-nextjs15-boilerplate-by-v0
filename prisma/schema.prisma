// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticators")
}

model User {
  id            String    @id @default(cuid())
  name          String    @unique @db.VarChar(255)
  displayName   String?   @map("display_name") @db.VarChar(255)
  email         String?   @unique @db.VarChar(255)
  password      String?
  emailVerified DateTime? @map("email_verified")
  image String?   @db.Text @map("image")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at")

  accounts      Account[]
  authenticators Authenticator[]
  sessions      Session[]

  posts         Post[]
  @@map("users")
}


model Post {
  id String @id @default(cuid())
  userId String @map("user_id")
  content String @db.Text
  contentHtml String @db.Text @map("content_html") @default("<p></p>")
  preview Json? @db.Json
  commentCount Int @default(0) @map("comment_count")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  postComments PostComment[]

  @@index([userId])

  @@map("posts")
}

model PostComment {
  id Int @id @default(autoincrement())
  userId String @map("user_id")
  postId String @map("post_id")
  content String @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([postId])

  @@map("post_comments")
}